apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName rootProject.ext.VERSION_NAME

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:2.8.9"
    testImplementation 'org.jmockit:jmockit:1.28'
    testImplementation 'com.google.code.gson:gson:2.8.6'
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation "org.mockito:mockito-android:2.8.9"

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation project(':matrix-android-lib')
    api project(path: ':matrix-trace-canary')
}

version = rootProject.ext.VERSION_NAME
group = rootProject.ext.GROUP

if("External" == rootProject.ext.PUBLISH_CHANNEL) {
    apply from: rootProject.file('gradle/android-publish.gradle')
}
else {
    apply from: rootProject.file('gradle/WeChatPublish.gradle')
    apply from: rootProject.file('gradle/WeChatNativeDepend.gradle')
    wechatPublish {
        artifactId = POM_ARTIFACT_ID
    }
}


apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.5"
}

afterEvaluate {
    if (isAndroidModule()) {
        setupAndroidReporting()
    } else {
        setupKotlinReporting()
    }
}

def isAndroidModule() {
    boolean isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
    boolean isAndroidApp = project.plugins.hasPlugin('com.android.application')
    return isAndroidLibrary || isAndroidApp
}


def setupKotlinReporting() {
    jacocoTestReport {
        dependsOn test
        reports {
            csv.enabled false // change if needed
            xml.enabled false // change if needed
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }
    }
}

def setupAndroidReporting() {
    tasks.withType(Test) {
        // Whether or not classes without source location should be instrumented
        jacoco.includeNoLocationClasses true
    }

    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
        reports {
            csv.enabled false
            xml.enabled false
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }

        // Change as needed
        def mainSrc = "$projectDir/src/main/java"
        def fileFilter = [
                '**/*App.*',
                '**/*Application.*',
                '**/*Activity.*',
                '**/*Fragment.*',
                '**/*JsonAdapter.*', // adapters generated by Moshi
                '**/di/**',
                '**/*Dagger.*',
                '**/R$**.*',
                '**/BuildConfig.*',
        ]
        def debugClassesDir = fileTree(
                dir: "$buildDir/intermediates/javac/debug",
                excludes: fileFilter
        )
        setSourceDirectories(files([mainSrc]))
        setClassDirectories(files([debugClassesDir]))
        setExecutionData(fileTree(
                dir: project.buildDir,
                includes: [
                        'jacoco/testDebugUnitTest.exec',
                        'outputs/code-coverage/connected/*coverage.ec'
                ]
        ))
    }
}
